---
title: Upgrade EKS cluster
weight: 53
last_reviewed_on: 2024-01-24
review_in: 3 months
---

# Upgrade EKS cluster

The Cloud Platform EKS cluster upgrade involves upgrading any of the below:

- Upgrade EKS Terraform Module
- Upgrade EKS version (Control Plane and Node Groups)
- Upgrade addon(s)
- Upgrade AMI version

The Cloud Platform EKS clusters are created using the official [terraform-aws-eks](https://github.com/terraform-aws-modules/terraform-aws-eks) module.
The EKS version and addons are currently independent of the version of the terraform-aws-eks module.
Therefore, it will not always require an upgrade of the terraform-aws-eks module and/or the addons whenever there is an upgrade of the EKS version.
Please check the changelogs for the terraform-aws-eks module, the EKS version and the addons when planning an upgrade.

## Pre-requisites

Before you begin, there are a few pre-requisites:

- Your GPG key must be added to the [infrastructure repo](https://github.com/ministryofjustice/cloud-platform-infrastructure) so that you can run `git-crypt unlock`.

- You have the [AWS CLI](https://aws.amazon.com/cli/) profile `moj-cp` with suitable credentials.

- You have terraform and docker installed

- Review the changelog of the [Kubernetes release](https://kubernetes.io/releases/) and the [EKS release](https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html) you are planning to upgrade to.

- Review the official [EKS upgrading a cluster](https://docs.aws.amazon.com/eks/latest/userguide/update-cluster.html) document for any extra steps that are a part of a specific EKS release.

- Run [kubent](https://github.com/doitintl/kube-no-trouble) against cluster to find deprecated APIs.

## Upgrade Steps

### Compatibility Check

The following areas need to be looked into to determine if there's any additional preparation work to do:

* Kubernetes API Deprecations/Removals
* EKS module
* EKS addons
* Components

Tools:

For Kubernetes API deprecations or removals you can use [kubent](https://github.com/doitintl/kube-no-trouble) and [pluto](https://github.com/FairwindsOps/pluto) to scan the cluster and find if there are any resources impacted in upcoming releases.

Users will need to be notified if their resources are affected by API deprecations or removals.

###Â Preparing for upgrade

Communication is an important part of the upgrade procedure, make sure to update `#ask-cloud-platform` and `#cloud-platform-update` when commencing the upgrade. Create a thread in `#cloud-platform` to keep the team updated on the current status of the upgrade.

Pause the following pipelines:

* bootstrap
* infrastructure-live
* infrastructure-live-2
* infrastructure-manager

Update `cluster.tf` in `cloud-platform-infrastructure` with the version of Kubernetes you are upgrading to.

Run a `tf plan` against the cluster your upgrading to check to see if everything is expected, the only changes should be to resources relating to the the version upgrade.

> **IMPORTANT:** Do not run `tf apply` this will most likely time out and fail.

### Monitoring the upgrade

Before you start the upgrade it is useful to have a few monitoring resources up and running so you can catch any issues quickly.

[k9s](https://k9scli.io/) is a useful tool to have open in a few terminal windows, the following views are helpful:

* nodes - see nodes recycling and coming up with new version
* events - check to see if there are any errors
* pods - you can use vim style searching to see pods in `Error` state.

When a node group version changes, this will cause all of the nodes to recycle. When AWS recycles the nodes, it will not evict pods if it will break the PDB.
This will cause the node to stall the update and the nodes will **not** continue to recycle.

To rectify this, run the script mentioned in [Recycle-all-nodes Gotchas](/recycle-all-nodes.html#gotchas) section.

Dashboards??? @TODO

### Starting the upgrade

As with preparing for the upgrade communication is really important, keep the thread in `#cloud-platform` up to date as much as possible.

#### Upgrading the control pane

Log in to the AWS console and select the EKS cluster we're going to upgrade.

In the top right corner there should be a button called `Upgrade now`, click that and ensure the correct Kubernetes version is selected then press `Update`.

Control pane updates usually take 10 minutes to run.

#### Upgrading the monitoring node group

From the cluster control panel select `Compute` tab.

Select `Upgrade now` next to the monitoring node group.

For update strategy select "Force update"

Click `Update`

#### Upgrading the default node group

From the cluster control panel select `Compute` tab.

Select `Upgrade now` next to the monitoring node group.

For update strategy select "Force update"

Click `Update`

Once the upgrade has completed notify the Slack channels.

### Finishing the upgrade

Create a new pull request in the `cloud-platform-infrastructure` repo with the updated version strings.

Unpause the following pipelines in this order and check to make sure no changes are present:

1. infrastructure-live-2
2. infrastructure-manager
3. infrastructure-live

If there are no changes for terraform shown in each pipeline then the PR can be merged in.

Unpause the bootstrap pipeline.

### Finishing touches

The `kubectl` version in the `cloud-platform-cli` needs updating to match the current Kubernetes version.

Documentation used as part of the upgrade should be reviewed and refined if needed.
